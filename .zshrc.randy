# =========================================================================== #
#   Zsh config
#   Configured by Randomize, 2012-2014
#
#   Thanks to:
#   msjche,
#
#   TODO: setup keyboard widget (see habr post)
#
# =========================================================================== #
#



# Zsh Options ==================================================================================

# History
export HISTFILE=~/.zsh_history
export HISTSIZE=50000
export SAVEHIST=50000
setopt hist_ignore_dups
setopt hist_reduce_blanks
setopt hist_ignore_space
setopt extended_history # Timestamp history
setopt share_history
setopt inc_append_history


# Completion

autoload -Uz compinit && compinit
# http://www.acm.uiuc.edu/workshops/zsh/prompt/escapes.html

# From gentoo wiki
zstyle ':completion:*:descriptions' format '%U%B%d%b%u' 
zstyle ':completion:*:warnings' format '%BSorry, no matches for: %d%b'


# Following causes empty directory slowdown - commented
#zstyle ':completion:*' completer _list _oldlist _expand _complete _ignored _match _correct _approximate
zstyle ':completion:*' file-sort access
zstyle ':completion:*' matcher-list '' ''
zstyle ':completion:*' max-errors 100 numeric
zstyle ':completion:*' menu select
zstyle ':completion:*' group-name ''

# Color on suggestions to display partial match
zstyle -e ':completion:*:default' list-colors 'reply=("${PREFIX:+=(#bi)($PREFIX:t)(?)*==32=00}:${(s.:.)LS_COLORS}")';

# Processes
# zstyle ':completion:*:processes' command 'ps -aux'
# zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;32'
zstyle ':completion:*:processes' command 'NOCOLORS=1 ps -U $(whoami)|sed "/ps/d"'
zstyle ':completion:*:processes' insert-ids menu yes select
zstyle ':completion:*:processes-names' command 'NOCOLORS=1 ps xho command|sed "s/://g"'
zstyle ':completion:*:processes' sort false



###
# Prompts ==================================================================================
autoload -U colors && colors

export BASE_PS1="%{$fg_bold[green]%}%n@%M %{$fg_bold[blue]%}%1~%{$reset_color%}"
# export RPROMPT="[%{$fg_no_bold[yellow]%}%?%{$reset_color%}]"
RPROMPT="%B%{$fg[black]%}%~%{$reset_color%}"

# Making vim modes visible with hooks
function zle-line-init zle-keymap-select {
   VIM_ON="%{$fg_bold[red]%}$%{$reset_color%}"
   VIM_OFF="%{$fg_bold[green]%}$%{$reset_color%}"
   PS1="$BASE_PS1 ${${KEYMAP/vicmd/$VIM_ON}/(main|viins)/$VIM_OFF} "
   #RPS1="${${KEYMAP/vicmd/N}/(main|viins)/I}"
   #RPS2=$RPS1
   zle reset-prompt
}

zle -N zle-line-init
zle -N zle-keymap-select

setopt autopushd pushdminus pushdsilent pushdtohome

# To avoid tedious 'cd ' typing, just type directory name to cd to it
setopt autocd

setopt cdablevars
setopt ignoreeof
setopt interactivecomments
setopt nobanghist
setopt noclobber
#setopt SH_WORD_SPLIT
setopt CORRECT
# setopt MENUCOMPLETE
setopt nohup
setopt ALL_EXPORT

# Keyboard ==================================================================================

# Ctrl+space : ls current dir
# Ctrl+shift+space : print Git/Svn status or list files with ls
#

# Run in vim mode
bindkey -v
export KEYTIMEOUT=1

# Home key, fixes in urxvt, not xterm
bindkey -v '^[[1~' beginning-of-line
bindkey -a '^[[1~' beginning-of-line

# End key
bindkey -v '^[[4~' end-of-line
bindkey -a '^[[4~' end-of-line

# Delete key
bindkey -v '^[[3~' delete-char
bindkey -a '^[[3~' delete-char

# Page Up and Page Down
bindkey -v '^[[5~' up-history
bindkey -a '^[[5~' up-history
bindkey -v '^[[6~' down-history
bindkey -a '^[[6~' down-history

# Backspace key fix
bindkey -v '^H' backward-delete-char
bindkey -a '^H' backward-delete-char
bindkey -v '^?' backward-delete-char
bindkey -a '^?' backward-char

# Undo / Redo
bindkey -a u undo
bindkey -a '^R' redo

# Unknown stuff
#bindkey '^[[9~' beginning-of-line
#bindkey '^[[8~' end-of-line
#bindkey '^[OD' backward-word
#bindkey '^[OC' forward-word
#bindkey '^[^[[D' stack-cd-forward
#bindkey '^[^[[C' stack-cd-backward
#bindkey '^[[1;3D' stack-cd-forward
#bindkey '^[[1;3C' stack-cd-backward
#bindkey '^[[Z' reverse-menu-complete
# bindkey '^h' backward-delete-char

# History search
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search

# Stupid arrows
bindkey -v '^[[A' up-line-or-beginning-search
bindkey -v '^[[B' down-line-or-beginning-search
# Alt+jk
bindkey -v '\ek'  up-line-or-beginning-search
bindkey -v '\ej'  down-line-or-beginning-search
# normal mode jk
bindkey -a 'k'    up-line-or-beginning-search
bindkey -a 'j'    down-line-or-beginning-search

# Search backwards and forwards with a pattern
# normal mode
bindkey -a '/' history-incremental-pattern-search-backward
bindkey -a '?' history-incremental-pattern-search-forward
# Ctrl+rf
# bindkey -v '^r' history-incremental-pattern-search-backward
# bindkey -v '^f' history-incremental-pattern-search-forward
# Alr+rf
bindkey -v '\er' history-incremental-pattern-search-backward
bindkey -v '\ef' history-incremental-pattern-search-forward

# Clear screen <a-c>
bindkey -v '\ec' clear-screen


# Enable exit on Ctrl+D
extended_logout() {
   exit
}
zle -N extended-logout extended_logout
bindkey -a '^d' extended-logout
bindkey -v '^d' extended-logout

# Mapping Alt+S to custom function that inserts sudo
insert_sudo () { zle beginning-of-line; zle -U "sudo " }
zle -N insert-sudo insert_sudo
bindkey '\es' insert-sudo

# Mapping <a-o> to add less
bindkey -s '\eo' ' | less'

# Insert last word with Alt+. -- cool!
bindkey '\e.' insert-last-word

bindkey '\eh' backward-char
bindkey '\el' forward-char

bindkey '\ey' accept-and-hold

# Use C-x C-e to edit the current command line
autoload -U edit-command-line
zle -N edit-command-line
bindkey '\ex' edit-command-line
bindkey -M vicmd v edit-command-line

# Make Shift-TAB work as backward complete
bindkey '^[[Z' reverse-menu-complete

# Make delete by word parts with Alt+w
tcsh-backward-kill-word() {
  local WORDCHARS="${WORDCHARS:s@/@}"
  zle backward-kill-word
}
zle -N tcsh-backward-kill-word
bindkey '\ew' tcsh-backward-kill-word

# Make Ctrl+W to erase word
bindkey '^w' backward-kill-word

# Toggle Ctrl+Z vim
foreground-vi() {
  fg %vim
}
zle -N foreground-vi
bindkey -a '^Z' foreground-vi
bindkey -v '^Z' foreground-vi

# Pasting from clipboard
vi-append-x-selection () { RBUFFER=$(xsel -o -p </dev/null)$RBUFFER; }
vi-append-x-clipboard () { RBUFFER=$(xsel -o -b </dev/null)$RBUFFER; }
zle -N vi-append-x-selection
zle -N vi-append-x-clipboard

bindkey -v '^[[2~' vi-append-x-clipboard
bindkey -a '^[[2~' vi-append-x-clipboard



# Functions ==================================================================================

autoload -U zmv

function clean-git() {
    rm .gitignore
    git clean -df
    git reset HEAD --hard
}

# Set brightness
function brightness() {
   sudo ddccontrol -r 0x10 dev:/dev/i2c-6 -w "$1"
}

# Set mute/unpute (1 = muted, 2 = unmuted)
function mutemon() {
   sudo ddccontrol -r 0x8d dev:/dev/i2c-6 -w "$1"
}

# sibdiff Source Destination ../../some/tricky/../path/to/file.cpp
function sibdiff() {
   # Simple zsh magick - replacing in full path $3:A $1 with $2
   vimdiff ${${3:A}/${1}/${2}} ${3:A}
}

## Cd and list
function cdd(){ cd "$1" ; ls --color}

mkcd() { mkdir -p "$*" && cd "$*"; }
lss()  { tree $@ | less }
wiki() { dig +short txt $(echo "$*" | tr ' ' _).wp.dg.cx }
lls()  { locate "$*" | less }
vkplay() { xclip -o | cut -d \" -f 2 | xargs getvk.py --best | xargs mpv }
vklist() { xclip -o | cut -d \" -f 2 | xargs getvk.py  }

## Pacman stuff
pacdesc() { pacman -Qi $1 | grep "Description" }
who-owns() { pacman -Qo `which $1` }

## Command-line calculator
calc() { python -ic "from __future__ import division; from math import *; from random import *" ;}

## Commandline Fu
cmdfu() { curl "http://www.commandlinefu.com/commands/matching/$(echo "$@" \
        | sed 's/ /-/g')/$(echo -n $@ | base64)/plaintext" ;}

##Check if websites are down
down4me() { curl -s "http://www.downforeveryoneorjustme.com/$1" | sed '/just you/!d;s/<[^>]*>//g';}

## Google Translate Functions ##

say() {
   find ~/Downloads/en -name "$1.ogg" -exec ogg123 {} \;
   # mplayer -user-agent Mozilla -prefer-ipv4 \
   # "http://translate.google.md/translate_tts?ie=UTF-8&tl="$1"&q=$(echo "$@" \
   # | cut -d ' ' -f2- | sed 's/ /\+/g')" > /dev/null 2>&1 ;
}

say-translation() {
   lang=$1
   trans=$(translate {=$lang} "$(echo "$@" | cut -d ' ' -f2- | sed 's/ /\+/g')" )
   echo $trans
   mplayer -user-agent Mozilla \
   "http://translate.google.com/translate_tts?ie=UTF-8&tl=$lang&q=$trans" > /dev/null 2>&1 ;
}

# Misc stuff ==================================================================================
#
unsetopt ALL_EXPORT

# Auto notify on command not found
source /usr/share/doc/pkgfile/command-not-found.zsh


# Colorize mans
man() {

  # LESS_TERMCAP_mb=$(printf "\e[1;34m") \
  # LESS_TERMCAP_md=$(printf "\e[1;34m") \
  # LESS_TERMCAP_me=$(printf "\e[0m") \
  # LESS_TERMCAP_se=$(printf "\e[0m") \
  # LESS_TERMCAP_so=$(printf "\e[1;31m") \
  # LESS_TERMCAP_ue=$(printf "\e[0m") \
  # LESS_TERMCAP_us=$(printf "\e[1;32m") \

  env \
  LESS_TERMCAP_mb=$'\E[01;31m'       \
  LESS_TERMCAP_md=$'\E[01;38;5;74m'  \
  LESS_TERMCAP_me=$'\E[0m'           \
  LESS_TERMCAP_se=$'\E[0m'           \
  LESS_TERMCAP_so=$'\E[38;5;220;1m'  \
  LESS_TERMCAP_ue=$'\E[0m'           \
  LESS_TERMCAP_us=$'\E[04;38;5;146m' \
  man "$@"
}

# Colorize less
less() {
  env \
  LESS_TERMCAP_mb=$(printf "\e[1;34m") \
  LESS_TERMCAP_md=$(printf "\e[1;34m") \
  LESS_TERMCAP_me=$(printf "\e[0m") \
  LESS_TERMCAP_se=$(printf "\e[0m") \
  LESS_TERMCAP_so=$(printf "\e[1;31m") \
  LESS_TERMCAP_ue=$(printf "\e[0m") \
  LESS_TERMCAP_us=$(printf "\e[1;32m") \
  less "$@"
}

zman() {
  PAGER="less -g -s '+/^       "$1"'" man zshall
}



# Plugins and external stuff ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


# 4. FFMpeg ============================================================================

ffx_MONO="1"            # mono
ffx_DUAL="2"            # dual channel
ffx_HW="hw:1,0"         # alsa; run 'cat /proc/asound/pcm' to change to the correct numbers
ffx_PULSE="pulse"       # pulseaudio; might have to install pavucontrol to change volume
ffx_FPS="30"            # frame per seconds
ffx_WIN_FULL="1920x1080"        # record fullscreen
ffx_AUDIO="pcm_s16le"   # audio codec
ffx_VIDEO="libx264"     # video codec
ffx_PRESET="ultrafast"  # preset error? run 'x264 -h' replace with fast,superfast, slow ..etc
ffx_CRF="0"
ffx_THREADS="0"
ffx_SCALE="scale=1920x1080"     # scale resolution, no black bars on sides of video on youtube
ffx_OUTPUT=~/screencast.avi
ffx_OUTPUT_FINAL=~/screencast.mp4
# Note: -vf is optional delete if you want, -y is to overwrite existing file

alias FF='ffmpeg -f alsa -i pulse -f x11grab -r 15 -s 1920x1080 -i :0.0 -acodec pcm_s16le -vcodec huffyuv -sameq ~/screencasts/screencast.avi'

FF-full()
{
        ffmpeg \
        -f alsa \
        -ac $ffx_MONO \
        -i $ffx_PULSE \
        -f x11grab \
        -r $ffx_FPS \
        -s 1920x1280 \
        -i :0.0+0,0 \
        -acodec $ffx_AUDIO \
        -vcodec $ffx_VIDEO \
        -preset $ffx_PRESET \
        -crf $ffx_CRF \
        -threads $ffx_THREADS \
        -y $ffx_OUTPUT \
}
#       -s ffx_WIN_FULL \
#       -vf $ffx_SCALE \


# capture single window, use mouse cursor to select window you want to record
FF-window()
{
        ffx_INFO=$(xwininfo -frame)
        ffmpeg \
        -f alsa \
        -ac $ffx_MONO \
        -i $ffx_PULSE \
        -f x11grab \
        -r $ffx_FPS \
        -s $(echo $ffx_INFO \
           | grep -oEe 'geometry [0-9]+x[0-9]+'\
           | grep -oEe '[0-9]+x[0-9]+') \
        -i :0.0+$(echo $ffx_INFO \
           | grep -oEe 'Corners:\s+\+[0-9]+\+[0-9]+' \
           | grep -oEe '[0-9]+\+[0-9]+' \
           | sed -e 's/\+/,/' ) \
        -acodec $ffx_AUDIO \
        -vcodec $ffx_VIDEO \
        -preset $ffx_PRESET \
        -crf $ffx_CRF \
        -threads $ffx_THREADS \
        -y $ffx_OUTPUT \
}

FF-convert()
{
    ffmpeg \
        -i $ffx_OUTPUT \
        -ar 22050 \
        -ab 32k \
        -strict -2 \
         $ffx_OUTPUT_FINAL
}

Convert()
{
    ffmpeg \
        -i $1 \
        -ar 22050 \
        -ab 32k \
        -strict -2 \
         output.avi
}

# set an ad-hoc GUI timer
timer()
{
  local N=$1; shift
  (sleep "${N}" && zenity --info --title="Time's Up" --text="${*:-BING}") &
  echo "timer set for ${N} seconds "
}

highlightkeynote() { highlight --font=Consolas --font-size=24 --style=molokai -i "$@" -O rtf ;}

function psgrep() { ps axuf | grep -v grep | grep "$@" -i --color=auto; }
function fname() { find . -iname "*$@*"; }
function open() { xdg-open $1 &> /dev/null &disown; }
function lt() { ls -ltrsa "$@" | tail; }

# Dnvm is required for roslyn omnisharp server
[ -s "/home/randy/.dnx/dnvm/dnvm.sh" ] && . "/home/randy/.dnx/dnvm/dnvm.sh" # Load dnvm

