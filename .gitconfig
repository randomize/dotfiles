[user]
   name = Eugene Mihailenco
   email = emihailenco@protonmail.com
[alias]
   co = checkout
   ci = commit
   st = status --column
   br = branch
   hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
   type = cat-file -t
   dump = cat-file -p
   aa = add --all
   dc = diff --cached
   di = diff
   amend = commit --amend
   pr = pull --rebase

   ff = merge --ff-only
   pullff = pull --ff-only
   noff = merge --no-ff
   fa = fetch --all
   pom = push origin master
   ds = diff --stat=160,120
   dh1 = diff HEAD~1

   # Divergence (commits we added and commits remote added)
   div = divergence

   # Goodness (summary of diff lines added/removed/total)
   gn = goodness
   gnc = goodness --cached

   # Fancy logging.
   # h = head
   # hp = head with patch
   # r = recent commits, only current branch
   # ra = recent commits, all reachable refs
   # l = all commits, only current branch
   # la = all commits, all reachable refs
   hp = "!. ~/bin/githelpers && show_git_head"
   h = !git head
   head = !git l -1
   la = !git l --all
   l = "!. ~/bin/githelpers && pretty_git_log"
   r = !GIT_NO_PAGER=1 git l -30
   ra = !git r --all
   b = "!. ~/bin/githelpers && pretty_git_branch"
   bs = "!. ~/bin/githelpers && pretty_git_branch_sorted"


   this = !git init && git add . && git commit -m \"initial commit\"
   alias = !git config --list | grep -E 'alias\\.' | sed -E 's/alias\\.([^=]*)=(.*)/\\1 => \\2/' | sort

   # Take a snapshot of your current working tree without removing
   # the changes from your tree.
   snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"

   # Easy merging, pick a file(s) from the current branch or
   # the merged branch respectively:
   ours   = "!f() { git checkout --ours $@ && git add $@; }; f"
   theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"
   bra = "!f() { git for-each-ref --sort=committerdate --format='%(refname:short) * %(authorname) * %(committerdate:relative)' refs/remotes/ | column -t -s '*'; }; f"
   cleanup = "!f() { git reset HEAD --hard && git clean -dfx ; }; f"

   # Find todos in repo code.
   todo = grep --heading --break --ignore-case -e ' FIX: *' -e ' TODO: *'

   # Just another one pretty-print
   wow = log --all --graph --decorate --oneline --simplify-by-decoration
[color]
   ui = true
[push]
   default = matching
[merge]
   tool = vimdiff
[mergetool]
   prompt = true
[mergetool "vimdiff"]
   cmd = nvim -d $BASE $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'

# Setting up LFS

[http]
   sslVerify = false
[filter "lfs"]
   clean = git-lfs clean -- %f
   smudge = git-lfs smudge -- %f
   required = true
   process = git-lfs filter-process
[credential]
   helper = cache --timeout=3600

[lfs]
   batch = true
   concurrenttransfers = 40
[pull]
	rebase = false
[core]
	pager = diff-so-fancy | less --tabs=4 -RFX
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22
[color "diff"]
	meta = 11
	frag = magenta bold
	commit = yellow bold
	old = red bold
	new = green bold
	whitespace = red reverse
